# ===========================================================
# Scout Analytics – PRODUCTION END-STATE Dashboard Specification
# Revision: 2025-06-14-r4 (DEPLOYED AND OPERATIONAL)
# Pulser-compatible YAML – one source of truth
# ===========================================================
meta:
  dashboard_id: scout-analytics-mvp
  name       : "Scout Analytics – Philippine Retail Intelligence"
  owner      : pulser/edge
  status     : production-deployed
  route      : "/"
  pages      : [overview, trends, products, consumers, chat]
  deployment:
    url      : "https://scout-mvp.vercel.app"
    platform : vercel
    build_cmd: "npm run build"
    deploy_cmd: "vercel --prod --yes"
    last_deployed: "2025-06-14T15:30:00Z"
    commit_hash  : "1e012c3"
    branch_merged: "feature/enhanced-kpi-dashboard → main"

data_sources:
  - supabase[transactions_fmcg]
  - supabase[transaction_items_fmcg]
  - supabase[products]
  - supabase[customers]
  - supabase[stores]
  - edge_function[azure_openai_stream]

layout_defaults:
  grid:
    breakpoints: { sm: 1, md: 2, lg: 3, xl: 4 }
    gap       : 1rem
  kpi_format :
    currency : "₱0,0.00"
    percent  : "0.0 %"
    count    : "0,0"

# -----------------------------------------------------------
#  PAGE: OVERVIEW  (Executive dashboard – already mostly live)
# -----------------------------------------------------------
pages:

- id   : overview
  label: Overview
  path : "/"
  components:
    - kpi_total_revenue
    - kpi_transactions
    - kpi_aov
    - kpi_units_sold
    - kpi_unique_customers
    - kpi_gross_margin_pct
    - chart_revenue_trend
    - panel_ai_insights
    - panel_data_quality
    - chart_category_performance
    - table_top_categories     # new – used on slide 1
    - panel_action_items

# -----------------------------------------------------------
#  PAGE: TRENDS  (slide "Transaction Trends")
# -----------------------------------------------------------
- id   : trends
  label: Transaction Trends
  path : "/trends"
  components:
    - chart_revenue_trend_30d
    - chart_hourly_distribution
    - chart_day_of_week
    - chart_regional_performance
    - chart_store_performance
    - card_trend_key_insights

# -----------------------------------------------------------
#  PAGE: PRODUCTS  (slide "Product Mix & SKU Info")
# -----------------------------------------------------------
- id   : products
  label: Product Mix
  path : "/products"
  components:
    - chart_category_performance    # donut
    - chart_brand_performance       # horizontal bar
    - table_top_products            #  best sellers
    - sankey_substitution_patterns  #  Brand A → Brand B
    - card_product_key_insights
    - panel_product_recommendations

# -----------------------------------------------------------
#  PAGE: CONSUMERS  (slide "Consumer Insights / Profiling")
# -----------------------------------------------------------
- id   : consumers
  label: Consumer Insights
  path : "/consumers"
  components:
    - kpi_total_customers
    - kpi_avg_items_per_basket
    - kpi_avg_basket_value
    - kpi_repeat_rate
    - donut_age_distribution
    - donut_gender_distribution
    - bar_income_bracket
    - heat_shopping_time
    - stacked_payment_methods
    - table_customer_segments
    - card_consumer_key_insights
    - panel_consumer_recommendations

# -----------------------------------------------------------
#  PAGE: CHAT (Scout AI bot with cookie mascot)
# -----------------------------------------------------------
- id   : chat
  label: Chat
  path : "/chat"
  status: production-live
  components:
    - panel_scout_ai_chat
  features:
    - azure_openai_streaming
    - real_time_data_queries
    - fmcg_dataset_integration

# =================================================================
#  COMPONENT DEFINITIONS  – only NEW components are listed below.
#  Re-use definitions you already had for existing KPI & chart IDs.
# =================================================================

## ---- TRENDS ------------------------------------------------------
- id   : chart_revenue_trend_30d
  type : chart
  title: "30-Day Revenue Trend"
  chart_type: line
  dimension : DATE(transaction_date)
  measures  : [total_amount]
  query: |
    SELECT DATE(transaction_date) AS date,
           SUM(total_amount)      AS value
    FROM   transactions_fmcg
    WHERE  transaction_date >= NOW() - INTERVAL '30 day'
      AND  {{ global_filters }}
    GROUP BY 1 ORDER BY 1;
  layout: { col_span: 2, min_height: 18rem }

- id   : chart_hourly_distribution
  type : chart
  title: "Hourly Distribution"
  chart_type: column
  dimension : hour_bucket
  measures  : [txn_count]
  query: |
    SELECT EXTRACT(HOUR FROM transaction_date AT TIME ZONE 'Asia/Manila') AS hour_bucket,
           COUNT(*)                                                    AS txn_count
    FROM   transactions_fmcg
    WHERE  {{ global_filters }}
    GROUP BY 1 ORDER BY 1;
  layout: { col_span: 1, min_height: 16rem }

- id   : chart_day_of_week
  type : chart
  title: "Day-of-Week Performance"
  chart_type: column
  dimension : dow
  measures  : [revenue]
  query: |
    SELECT TO_CHAR(transaction_date,'Dy') AS dow,
           SUM(total_amount)              AS revenue
    FROM   transactions_fmcg
    WHERE  {{ global_filters }}
    GROUP BY 1
    ORDER BY ARRAY_POSITION(
       ARRAY['Sun','Mon','Tue','Wed','Thu','Fri','Sat'], TO_CHAR(transaction_date,'Dy'));
  layout: { col_span: 1, min_height: 16rem }

- id   : chart_regional_performance
  type : chart
  title: "Regional Performance"
  chart_type: geo
  dimension : stores.region
  measures  : [revenue]
  query: |
    SELECT s.region,
           SUM(t.total_amount) AS revenue
    FROM   transactions_fmcg t
    JOIN   stores s ON s.id = t.store_id
    WHERE  {{ global_filters }}
    GROUP BY 1;
  layout: { col_span: 1 }

- id   : chart_store_performance
  type : chart
  title: "Store Performance (Top 10)"
  chart_type: bar
  dimension : stores.name
  measures  : [revenue]
  query: |
    SELECT s.name,
           SUM(t.total_amount) AS revenue
    FROM   transactions_fmcg t
    JOIN   stores s ON s.id = t.store_id
    WHERE  {{ global_filters }}
    GROUP BY 1
    ORDER BY revenue DESC
    LIMIT 10;
  layout: { col_span: 1 }

- id   : card_trend_key_insights
  type : insight_card
  title: "Key Insights"
  datasource: edge_function/azure_openai_stream
  props:
    prompt_template: |
      "Generate three short insights about recent revenue trend,
       peak hours, best day-of-week and best performing barangay."
    max_items: 3
  layout: { col_span: 2 }

## ---- PRODUCTS ----------------------------------------------------
- id   : chart_brand_performance
  type : chart
  title: "Brand Performance (Top 10)"
  chart_type: bar
  dimension : brands.name
  measures  : [revenue]
  query: |
    SELECT b.name,
           SUM(ti.total_price) AS revenue
    FROM   transaction_items_fmcg ti
    JOIN   products p ON p.id = ti.product_id
    JOIN   brands   b ON b.id = p.brand_id
    JOIN   transactions_fmcg t ON t.id = ti.transaction_id
    WHERE  {{ global_filters }}
    GROUP BY 1 ORDER BY revenue DESC LIMIT 10;
  layout: { col_span: 2, min_height: 18rem }

- id   : table_top_products
  type : table
  title: "Top Products (Revenue)"
  columns: [rank, product, revenue, units]
  query: |
    SELECT ROW_NUMBER() OVER (ORDER BY SUM(ti.total_price) DESC) AS rank,
           p.name                                                AS product,
           SUM(ti.total_price)                                   AS revenue,
           SUM(quantity)                                         AS units
    FROM   transaction_items_fmcg ti
    JOIN   products p ON p.id = ti.product_id
    WHERE  {{ global_filters }}
    GROUP BY 2
    ORDER BY rank
    LIMIT 15;
  layout: { col_span: 2 }

- id   : sankey_substitution_patterns
  type : chart
  title: "Substitution Patterns (Brand A → Brand B)"
  chart_type: sankey
  query: |
    -- Example heuristic: same customer, same store, consecutive txns within 1 h
    WITH next_buy AS (
      SELECT t1.customer_id,
             p1.brand_id   AS from_brand,
             p2.brand_id   AS to_brand,
             1             AS swaps
      FROM   transactions_fmcg t1
      JOIN   transactions_fmcg t2
             ON  t2.customer_id = t1.customer_id
             AND t2.transaction_date > t1.transaction_date
             AND t2.transaction_date <= t1.transaction_date + INTERVAL '1 hour'
      JOIN   transaction_items_fmcg i1 ON i1.transaction_id = t1.id
      JOIN   transaction_items_fmcg i2 ON i2.transaction_id = t2.id
      JOIN   products p1 ON p1.id = i1.product_id
      JOIN   products p2 ON p2.id = i2.product_id
      WHERE  p1.brand_id <> p2.brand_id
        AND  {{ global_filters }}
    )
    SELECT b1.name AS source,
           b2.name AS target,
           COUNT(*)::int AS value
    FROM   next_buy nb
    JOIN   brands b1 ON b1.id = nb.from_brand
    JOIN   brands b2 ON b2.id = nb.to_brand
    GROUP  BY 1,2
    ORDER  BY value DESC
    LIMIT 20;
  layout: { col_span: 2, min_height: 20rem, lazy_load: true }

- id   : card_product_key_insights
  type : insight_card
  title: "Key Insights"
  datasource: edge_function/azure_openai_stream
  props:
    prompt_template: |
      "Generate three insights about category mix, brand gaps and substitution
       patterns based on the data above."
    max_items: 3
  layout: { col_span: 2 }

- id   : panel_product_recommendations
  type : action_board
  title: "Recommendations"
  datasource: table/product_actions
  columns : [priority, action, impact_estimate]
  layout  : { col_span: 4 }

## ---- CONSUMERS ---------------------------------------------------
- id   : kpi_total_customers
  type : kpi
  title: "Total Customers"
  unit : count
  format: "0,0"
  formula: |
    SELECT COUNT(*) FROM customers WHERE {{ global_filters }};

- id   : kpi_avg_items_per_basket
  type : kpi
  title: "Avg Items/Basket"
  unit : count
  format: "0.0"
  formula: |
    SELECT ROUND(AVG(items),1)
    FROM (
      SELECT SUM(quantity)::float AS items
      FROM   transaction_items_fmcg ti
      JOIN   transactions_fmcg    t ON t.id = ti.transaction_id
      WHERE  {{ global_filters }}
      GROUP  BY transaction_id
    ) q;

- id   : kpi_avg_basket_value
  type   : kpi
  title  : "Avg Basket Value"
  unit   : currency
  format : "₱0,0.00"
  formula: |
    SELECT ROUND(AVG(total_amount),2)
    FROM   transactions_fmcg
    WHERE  {{ global_filters }};

- id   : kpi_repeat_rate
  type : kpi
  title: "Repeat Customers"
  unit : percent
  format: "0 %"
  formula: |
    WITH firsts AS (
      SELECT customer_id, MIN(transaction_date) AS first_txn
      FROM   transactions_fmcg
      GROUP  BY 1
    )
    SELECT ROUND(
      COUNT(*) FILTER (WHERE repeat.txn_cnt > 1)::float /
      NULLIF(COUNT(*),0) * 100, 1)
    FROM (
      SELECT customer_id, COUNT(*) AS txn_cnt
      FROM   transactions_fmcg
      WHERE  {{ global_filters }}
      GROUP  BY 1
    ) repeat;

- id   : donut_age_distribution
  type : chart
  title: "Age Distribution"
  chart_type: donut
  dimension : age_group
  measures  : [customer_cnt]
  query: |
    SELECT age_group, COUNT(*) AS customer_cnt
    FROM   customers
    WHERE  {{ global_filters }}
    GROUP  BY 1
    ORDER  BY customer_cnt DESC;
  layout: { col_span: 1 }

- id   : donut_gender_distribution
  type : chart
  title: "Gender Distribution"
  chart_type: donut
  dimension : gender
  measures  : [customer_cnt]
  query: |
    SELECT gender, COUNT(*) AS customer_cnt
    FROM   customers
    WHERE  {{ global_filters }}
    GROUP  BY 1;
  layout: { col_span: 1 }

- id   : bar_income_bracket
  type : chart
  title: "Income Bracket Analysis"
  chart_type: bar
  dimension : income_bracket
  measures  : [revenue]
  query: |
    SELECT income_bracket,
           SUM(t.total_amount) AS revenue
    FROM   customers c
    JOIN   transactions_fmcg t ON t.customer_id = c.id
    WHERE  {{ global_filters }}
    GROUP  BY 1
    ORDER  BY revenue DESC;
  layout: { col_span: 2 }

- id   : heat_shopping_time
  type : chart
  title: "Shopping Time Preferences"
  chart_type: heatmap
  query: |
    SELECT EXTRACT(DOW  FROM transaction_date AT TIME ZONE 'Asia/Manila') AS dow,
           EXTRACT(HOUR FROM transaction_date AT TIME ZONE 'Asia/Manila') AS hour,
           COUNT(*) AS txn_cnt
    FROM   transactions_fmcg
    WHERE  {{ global_filters }}
    GROUP  BY 1,2;
  layout: { col_span: 2, min_height: 20rem }

- id   : stacked_payment_methods
  type : chart
  title: "Payment Method Usage"
  chart_type: stacked_bar
  query: |
    SELECT pay.method,
           DATE_TRUNC('month', t.transaction_date)::date AS month,
           SUM(pay.amount) AS value
    FROM   payments_fmcg pay
    JOIN   transactions_fmcg t ON t.id = pay.transaction_id
    WHERE  {{ global_filters }}
    GROUP  BY 1,2
    ORDER  BY 2 DESC, 1;
  layout: { col_span: 2 }

- id   : table_customer_segments
  type : table
  title: "Customer Segments"
  columns: [segment, share, description]
  query: |
    -- Dummy segmentation logic
    WITH seg AS (
      SELECT customer_id,
             CASE
               WHEN SUM(total_amount) > 2000 THEN 'Premium Shoppers'
               WHEN COUNT(*)  > 3        THEN 'Regular Customers'
               ELSE                         'Occasional Buyers'
             END AS segment
      FROM   transactions_fmcg
      WHERE  {{ global_filters }}
      GROUP  BY 1
    )
    SELECT segment,
           ROUND(COUNT(*)::float / SUM(COUNT(*)) OVER () * 100,1) AS share,
           CASE segment
             WHEN 'Premium Shoppers' THEN 'High value, frequent purchases'
             WHEN 'Regular Customers' THEN 'Consistent purchasing behaviour'
             ELSE 'Sporadic purchase patterns'
           END AS description
    FROM seg GROUP BY 1,3 ORDER BY share DESC;
  layout: { col_span: 2 }

- id   : card_consumer_key_insights
  type : insight_card
  title: "Key Insights"
  datasource: edge_function/azure_openai_stream
  props:
    prompt_template: |
      "Generate three insights on demographics, payment preference and
       retention based on the widgets above."
    max_items: 3
  layout: { col_span: 2 }

- id   : panel_consumer_recommendations
  type : action_board
  title: "Strategic Recommendations"
  datasource: table/consumer_actions
  columns : [priority, action, impact_estimate]
  layout  : { col_span: 4 }

## ---- CHAT --------------------------------------------------------
- id   : panel_scout_ai_chat
  type : chat_panel
  title: "Scout AI Retail Bot"
  datasource: edge_function/azure_openai_stream
  props:
    mascot_svg: "/assets/mascot/cookie.svg"   # tiny cookie in bottom-left
    stream    : true
  layout: { col_span: 4, min_height: 32rem }

# ================================================================
#  Global filter schema unchanged – reused from previous revision
# ================================================================
filters_schema:
  date_range : { from: date|null, to: date|null }
  barangays  : string[]
  regions    : string[]
  categories : string[]
  brands     : string[]
  stores     : string[]

# -------------------------------------------------------------
#  PRODUCTION SNAPSHOT  –  Live Production Data (FMCG Dataset)
#  Last verified: 2025-06-14 via https://scout-mvp.vercel.app
# -------------------------------------------------------------
snapshot:
  taken_at: "2025-06-14T15:30:00Z"
  data_source: "transactions_fmcg (5,000 transactions)"
  deployment_status: "✅ LIVE AND OPERATIONAL"
  kpis:
    total_revenue      : "₱1,213,902.44"  # FMCG dataset total
    transactions       : 5000             # Full FMCG transaction count
    avg_order_value    : "₱242.78"       # Updated AOV calculation
    units_sold         : 7250             # Estimated from item quantities
    unique_customers   : 995              # Active customer base
    gross_margin_pct   : "24-26%"        # After unit_cost backfill fix
  features_operational:
    - "✅ Real-time dashboard with Philippine retail data"
    - "✅ Azure OpenAI streaming chat bot (Scout Retail Bot)"
    - "✅ 17 regions, 72 brands, 5,000 FMCG transactions"
    - "✅ Responsive scaling with proper zoom functionality"
    - "✅ Database functions and RPC endpoints working"
    - "✅ Supabase client .distinct() API issue resolved"
  verification_urls:
    - "https://scout-mvp.vercel.app (main dashboard)"
    - "https://scout-mvp.vercel.app/chat (AI chat interface)"
  test_prompts:
    - "What was our total FMCG revenue last week?"
    - "Top 5 products by units sold this month"
    - "Show me repeat-customer rate and how to improve it"
    - "Which region grew fastest MoM?"
    - "Explain what the 5,000-row dataset actually contains"

# Project Scout Database Specification
# This file defines the canonical state of our Supabase database

roles:
  - name: admin
    inherit: false
  - name: analyst
    inherit: false

tables:
  brands:
    columns:
      - name: id
        type: integer
        primary_key: true
      - name: name
        type: varchar
        not_null: true
      - name: company
        type: text
        not_null: true
      - name: category
        type: varchar
      - name: is_tbwa
        type: boolean
        default: false
      - name: market_share
        type: decimal(5,2)
      - name: created_at
        type: timestamptz
        default: now()
    rls:
      enabled: true
      policies:
        - name: Allow public read access to brands
          operation: select
          using: true
        - name: Allow admin and service_role full access on brands
          operation: all
          using: auth.role() in ('admin', 'service_role')
          with_check: auth.role() in ('admin', 'service_role')

  products:
    columns:
      - name: id
        type: integer
        primary_key: true
      - name: name
        type: varchar
        not_null: true
      - name: brand_id
        type: integer
        references: brands(id)
      - name: created_at
        type: timestamptz
        default: now()
      - name: category
        type: varchar
      - name: subcategory
        type: text
      - name: unit_cost
        type: decimal(10,2)
      - name: retail_price
        type: decimal(10,2)
      - name: size
        type: text
      - name: unit
        type: text
    rls:
      enabled: true
      policies:
        - name: Allow analyst, admin, service_role read access on products
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')
        - name: Allow admin and service_role write access on products
          operation: all
          using: auth.role() in ('admin', 'service_role')
          with_check: auth.role() in ('admin', 'service_role')

  stores:
    columns:
      - name: id
        type: integer
        primary_key: true
      - name: name
        type: text
        not_null: true
        unique: true
      - name: location
        type: text
      - name: barangay
        type: text
      - name: city
        type: text
      - name: region
        type: text
      - name: latitude
        type: numeric
      - name: longitude
        type: numeric
      - name: store_type
        type: text
      - name: size_category
        type: text
      - name: created_at
        type: timestamptz
        default: now()
      - name: updated_at
        type: timestamptz
        default: now()
    rls:
      enabled: true
      policies:
        - name: Allow analyst, admin, service_role read access on stores
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')
        - name: Allow admin and service_role write access on stores
          operation: all
          using: auth.role() in ('admin', 'service_role')
          with_check: auth.role() in ('admin', 'service_role')

  customers:
    columns:
      - name: id
        type: integer
        primary_key: true
      - name: customer_id
        type: text
        not_null: true
        unique: true
      - name: name
        type: text
        not_null: true
      - name: age
        type: integer
      - name: gender
        type: text
        check: gender in ('Male', 'Female', 'Other')
      - name: region
        type: text
        not_null: true
      - name: city
        type: text
      - name: barangay
        type: text
      - name: loyalty_tier
        type: text
        default: 'regular'
      - name: total_spent
        type: numeric
        default: 0
      - name: visit_count
        type: integer
        default: 1
      - name: created_at
        type: timestamptz
        default: now()
    rls:
      enabled: true
      policies:
        - name: Allow analyst, admin, service_role read access on customers
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')

  devices:
    columns:
      - name: id
        type: uuid
        primary_key: true
        default: gen_random_uuid()
      - name: device_id
        type: text
        not_null: true
        unique: true
      - name: device_type
        type: text
        not_null: true
        default: 'RaspberryPi5'
      - name: firmware_version
        type: text
        not_null: true
        default: '1.0.0'
      - name: store_id
        type: integer
        references: stores(id)
      - name: status
        type: text
        not_null: true
        default: 'active'
        check: status in ('active', 'inactive', 'maintenance')
      - name: registration_time
        type: timestamptz
        default: now()
      - name: last_seen
        type: timestamptz
        default: now()
      - name: metadata
        type: jsonb
        default: '{}'
      - name: location
        type: text
      - name: network_info
        type: jsonb
        default: '{}'
      - name: created_at
        type: timestamptz
        default: now()
      - name: updated_at
        type: timestamptz
        default: now()
    rls:
      enabled: true
      policies:
        - name: Allow analyst, admin, service_role read access on devices
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')
        - name: Allow admin and service_role write access on devices
          operation: all
          using: auth.role() in ('admin', 'service_role')
          with_check: auth.role() in ('admin', 'service_role')

  transactions:
    columns:
      - name: id
        type: integer
        primary_key: true
      - name: created_at
        type: timestamptz
        default: now()
      - name: transaction_date
        type: timestamptz
        not_null: true
      - name: total_amount
        type: numeric
        default: 0
      - name: customer_age
        type: integer
      - name: customer_gender
        type: varchar
      - name: customer_id
        type: text
        references: customers(customer_id)
      - name: store_id
        type: integer
        references: stores(id)
      - name: checkout_seconds
        type: integer
      - name: is_weekend
        type: boolean
      - name: nlp_processed
        type: boolean
        default: false
      - name: nlp_processed_at
        type: timestamptz
      - name: nlp_confidence_score
        type: numeric
      - name: device_id
        type: text
        references: devices(device_id)
      - name: payment_method
        type: varchar
        default: 'cash'
      - name: checkout_time
        type: timestamptz
        default: now()
      - name: request_type
        type: varchar
        default: 'branded'
      - name: transcription_text
        type: text
      - name: suggestion_accepted
        type: boolean
        default: false
    rls:
      enabled: true
      policies:
        - name: Allow analyst, admin, service_role read access on transactions
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')
        - name: Allow admin and service_role write access on transactions
          operation: all
          using: auth.role() in ('admin', 'service_role')
          with_check: auth.role() in ('admin', 'service_role')

  transaction_items:
    columns:
      - name: id
        type: integer
        primary_key: true
      - name: transaction_id
        type: integer
        references: transactions(id)
      - name: product_id
        type: integer
        references: products(id)
      - name: quantity
        type: integer
        not_null: true
      - name: unit_price
        type: numeric
        not_null: true
      - name: total_price
        type: numeric
        not_null: true
      - name: created_at
        type: timestamptz
        default: now()
    rls:
      enabled: true
      policies:
        - name: Allow analyst, admin, service_role read access on transaction_items
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')
        - name: Allow admin and service_role write access on transaction_items
          operation: all
          using: auth.role() in ('admin', 'service_role')
          with_check: auth.role() in ('admin', 'service_role')

views:
  daily_sales:
    definition: |
      SELECT
        DATE(t.transaction_date) as date,
        COUNT(DISTINCT t.id) as transaction_count,
        SUM(ti.total_price) as total_revenue,
        AVG(ti.total_price) as avg_transaction_value
      FROM transactions t
      JOIN transaction_items ti ON t.id = ti.transaction_id
      GROUP BY DATE(t.transaction_date)
      ORDER BY date
    rls:
      enabled: true
      policies:
        - name: Allow analytics roles read on daily_sales
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')

  product_performance:
    definition: |
      SELECT
        p.name as product_name,
        b.name as brand_name,
        p.category,
        SUM(ti.quantity) as units_sold,
        SUM(ti.total_price) as total_revenue,
        AVG(ti.unit_price) as avg_price
      FROM products p
      JOIN brands b ON p.brand_id = b.id
      JOIN transaction_items ti ON p.id = ti.product_id
      JOIN transactions t ON ti.transaction_id = t.id
      GROUP BY p.name, b.name, p.category
      ORDER BY total_revenue DESC
    rls:
      enabled: true
      policies:
        - name: Allow analytics roles read on product_performance
          operation: select
          using: auth.role() in ('analyst', 'admin', 'service_role')

functions:
  get_age_distribution_simple:
    parameters:
      - name: filters
        type: jsonb
        default: '{}'
    returns: table
    language: plpgsql
    security: definer
    definition: |
      -- Function definition here (omitted for brevity)

  get_gender_distribution_simple:
    parameters:
      - name: filters
        type: jsonb
        default: '{}'
    returns: table
    language: plpgsql
    security: definer
    definition: |
      -- Function definition here (omitted for brevity)

  get_top_products:
    parameters:
      - name: filters
        type: jsonb
        default: '{}'
    returns: table
    language: plpgsql
    security: definer
    definition: |
      -- Function definition here (omitted for brevity)

  get_income_distribution:
    parameters:
      - name: filters
        type: jsonb
        default: '{}'
    returns: table
    language: plpgsql
    security: definer
    definition: |
      -- Function definition here (omitted for brevity)