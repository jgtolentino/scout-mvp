# ===========================================================
# Scout Analytics – PRODUCTION END-STATE Dashboard Specification
# Revision: 2025-06-14-r4 (DEPLOYED AND OPERATIONAL)
# Pulser-compatible YAML – one source of truth
# ===========================================================
meta:
  dashboard_id: scout-analytics-mvp
  name       : "Scout Analytics – Philippine Retail Intelligence"
  owner      : pulser/edge
  status     : production-deployed
  route      : "/"
  pages      : [overview, trends, products, consumers, chat]
  deployment:
    url      : "https://scout-mvp.vercel.app"
    platform : vercel
    build_cmd: "npm run build"
    deploy_cmd: "vercel --prod --yes"
    last_deployed: "2025-06-14T15:30:00Z"
    commit_hash  : "1e012c3"
    branch_merged: "feature/enhanced-kpi-dashboard → main"

data_sources:
  - supabase[transactions_fmcg]
  - supabase[transaction_items_fmcg]
  - supabase[products]
  - supabase[customers]
  - supabase[stores]
  - edge_function[azure_openai_stream]

layout_defaults:
  grid:
    breakpoints: { sm: 1, md: 2, lg: 3, xl: 4 }
    gap       : 1rem
  kpi_format :
    currency : "₱0,0.00"
    percent  : "0.0 %"
    count    : "0,0"

# -----------------------------------------------------------
#  PAGE: OVERVIEW  (Executive dashboard – already mostly live)
# -----------------------------------------------------------
pages:

- id   : overview
  label: Overview
  path : "/"
  components:
    - kpi_total_revenue
    - kpi_transactions
    - kpi_aov
    - kpi_units_sold
    - kpi_unique_customers
    - kpi_gross_margin_pct
    - chart_revenue_trend
    - panel_ai_insights
    - panel_data_quality
    - chart_category_performance
    - table_top_categories     # new – used on slide 1
    - panel_action_items

# -----------------------------------------------------------
#  PAGE: TRENDS  (slide "Transaction Trends")
# -----------------------------------------------------------
- id   : trends
  label: Transaction Trends
  path : "/trends"
  components:
    - chart_revenue_trend_30d
    - chart_hourly_distribution
    - chart_day_of_week
    - chart_regional_performance
    - chart_store_performance
    - card_trend_key_insights

# -----------------------------------------------------------
#  PAGE: PRODUCTS  (slide "Product Mix & SKU Info")
# -----------------------------------------------------------
- id   : products
  label: Product Mix
  path : "/products"
  components:
    - chart_category_performance    # donut
    - chart_brand_performance       # horizontal bar
    - table_top_products            #  best sellers
    - sankey_substitution_patterns  #  Brand A → Brand B
    - card_product_key_insights
    - panel_product_recommendations

# -----------------------------------------------------------
#  PAGE: CONSUMERS  (slide "Consumer Insights / Profiling")
# -----------------------------------------------------------
- id   : consumers
  label: Consumer Insights
  path : "/consumers"
  components:
    - kpi_total_customers
    - kpi_avg_items_per_basket
    - kpi_avg_basket_value
    - kpi_repeat_rate
    - donut_age_distribution
    - donut_gender_distribution
    - bar_income_bracket
    - heat_shopping_time
    - stacked_payment_methods
    - table_customer_segments
    - card_consumer_key_insights
    - panel_consumer_recommendations

# -----------------------------------------------------------
#  PAGE: CHAT (Scout AI bot with cookie mascot)
# -----------------------------------------------------------
- id   : chat
  label: Chat
  path : "/chat"
  status: production-live
  components:
    - panel_scout_ai_chat
  features:
    - azure_openai_streaming
    - real_time_data_queries
    - fmcg_dataset_integration

# =================================================================
#  COMPONENT DEFINITIONS  – only NEW components are listed below.
#  Re-use definitions you already had for existing KPI & chart IDs.
# =================================================================

## ---- TRENDS ------------------------------------------------------
- id   : chart_revenue_trend_30d
  type : chart
  title: "30-Day Revenue Trend"
  chart_type: line
  dimension : DATE(transaction_date)
  measures  : [total_amount]
  query: |
    SELECT DATE(transaction_date) AS date,
           SUM(total_amount)      AS value
    FROM   transactions_fmcg
    WHERE  transaction_date >= NOW() - INTERVAL '30 day'
      AND  {{ global_filters }}
    GROUP BY 1 ORDER BY 1;
  layout: { col_span: 2, min_height: 18rem }

- id   : chart_hourly_distribution
  type : chart
  title: "Hourly Distribution"
  chart_type: column
  dimension : hour_bucket
  measures  : [txn_count]
  query: |
    SELECT EXTRACT(HOUR FROM transaction_date AT TIME ZONE 'Asia/Manila') AS hour_bucket,
           COUNT(*)                                                    AS txn_count
    FROM   transactions_fmcg
    WHERE  {{ global_filters }}
    GROUP BY 1 ORDER BY 1;
  layout: { col_span: 1, min_height: 16rem }

- id   : chart_day_of_week
  type : chart
  title: "Day-of-Week Performance"
  chart_type: column
  dimension : dow
  measures  : [revenue]
  query: |
    SELECT TO_CHAR(transaction_date,'Dy') AS dow,
           SUM(total_amount)              AS revenue
    FROM   transactions_fmcg
    WHERE  {{ global_filters }}
    GROUP BY 1
    ORDER BY ARRAY_POSITION(
       ARRAY['Sun','Mon','Tue','Wed','Thu','Fri','Sat'], TO_CHAR(transaction_date,'Dy'));
  layout: { col_span: 1, min_height: 16rem }

- id   : chart_regional_performance
  type : chart
  title: "Regional Performance"
  chart_type: geo
  dimension : stores.region
  measures  : [revenue]
  query: |
    SELECT s.region,
           SUM(t.total_amount) AS revenue
    FROM   transactions_fmcg t
    JOIN   stores s ON s.id = t.store_id
    WHERE  {{ global_filters }}
    GROUP BY 1;
  layout: { col_span: 1 }

- id   : chart_store_performance
  type : chart
  title: "Store Performance (Top 10)"
  chart_type: bar
  dimension : stores.name
  measures  : [revenue]
  query: |
    SELECT s.name,
           SUM(t.total_amount) AS revenue
    FROM   transactions_fmcg t
    JOIN   stores s ON s.id = t.store_id
    WHERE  {{ global_filters }}
    GROUP BY 1
    ORDER BY revenue DESC
    LIMIT 10;
  layout: { col_span: 1 }

- id   : card_trend_key_insights
  type : insight_card
  title: "Key Insights"
  datasource: edge_function/azure_openai_stream
  props:
    prompt_template: |
      "Generate three short insights about recent revenue trend,
       peak hours, best day-of-week and best performing barangay."
    max_items: 3
  layout: { col_span: 2 }

## ---- PRODUCTS ----------------------------------------------------
- id   : chart_brand_performance
  type : chart
  title: "Brand Performance (Top 10)"
  chart_type: bar
  dimension : brands.name
  measures  : [revenue]
  query: |
    SELECT b.name,
           SUM(ti.total_price) AS revenue
    FROM   transaction_items_fmcg ti
    JOIN   products p ON p.id = ti.product_id
    JOIN   brands   b ON b.id = p.brand_id
    JOIN   transactions_fmcg t ON t.id = ti.transaction_id
    WHERE  {{ global_filters }}
    GROUP BY 1 ORDER BY revenue DESC LIMIT 10;
  layout: { col_span: 2, min_height: 18rem }

- id   : table_top_products
  type : table
  title: "Top Products (Revenue)"
  columns: [rank, product, revenue, units]
  query: |
    SELECT ROW_NUMBER() OVER (ORDER BY SUM(ti.total_price) DESC) AS rank,
           p.name                                                AS product,
           SUM(ti.total_price)                                   AS revenue,
           SUM(quantity)                                         AS units
    FROM   transaction_items_fmcg ti
    JOIN   products p ON p.id = ti.product_id
    WHERE  {{ global_filters }}
    GROUP BY 2
    ORDER BY rank
    LIMIT 15;
  layout: { col_span: 2 }

- id   : sankey_substitution_patterns
  type : chart
  title: "Substitution Patterns (Brand A → Brand B)"
  chart_type: sankey
  query: |
    -- Example heuristic: same customer, same store, consecutive txns within 1 h
    WITH next_buy AS (
      SELECT t1.customer_id,
             p1.brand_id   AS from_brand,
             p2.brand_id   AS to_brand,
             1             AS swaps
      FROM   transactions_fmcg t1
      JOIN   transactions_fmcg t2
             ON  t2.customer_id = t1.customer_id
             AND t2.transaction_date > t1.transaction_date
             AND t2.transaction_date <= t1.transaction_date + INTERVAL '1 hour'
      JOIN   transaction_items_fmcg i1 ON i1.transaction_id = t1.id
      JOIN   transaction_items_fmcg i2 ON i2.transaction_id = t2.id
      JOIN   products p1 ON p1.id = i1.product_id
      JOIN   products p2 ON p2.id = i2.product_id
      WHERE  p1.brand_id <> p2.brand_id
        AND  {{ global_filters }}
    )
    SELECT b1.name AS source,
           b2.name AS target,
           COUNT(*)::int AS value
    FROM   next_buy nb
    JOIN   brands b1 ON b1.id = nb.from_brand
    JOIN   brands b2 ON b2.id = nb.to_brand
    GROUP  BY 1,2
    ORDER  BY value DESC
    LIMIT 20;
  layout: { col_span: 2, min_height: 20rem, lazy_load: true }

- id   : card_product_key_insights
  type : insight_card
  title: "Key Insights"
  datasource: edge_function/azure_openai_stream
  props:
    prompt_template: |
      "Generate three insights about category mix, brand gaps and substitution
       patterns based on the data above."
    max_items: 3
  layout: { col_span: 2 }

- id   : panel_product_recommendations
  type : action_board
  title: "Recommendations"
  datasource: table/product_actions
  columns : [priority, action, impact_estimate]
  layout  : { col_span: 4 }

## ---- CONSUMERS ---------------------------------------------------
- id   : kpi_total_customers
  type : kpi
  title: "Total Customers"
  unit : count
  format: "0,0"
  formula: |
    SELECT COUNT(*) FROM customers WHERE {{ global_filters }};

- id   : kpi_avg_items_per_basket
  type : kpi
  title: "Avg Items/Basket"
  unit : count
  format: "0.0"
  formula: |
    SELECT ROUND(AVG(items),1)
    FROM (
      SELECT SUM(quantity)::float AS items
      FROM   transaction_items_fmcg ti
      JOIN   transactions_fmcg    t ON t.id = ti.transaction_id
      WHERE  {{ global_filters }}
      GROUP  BY transaction_id
    ) q;

- id   : kpi_avg_basket_value
  type   : kpi
  title  : "Avg Basket Value"
  unit   : currency
  format : "₱0,0.00"
  formula: |
    SELECT ROUND(AVG(total_amount),2)
    FROM   transactions_fmcg
    WHERE  {{ global_filters }};

- id   : kpi_repeat_rate
  type : kpi
  title: "Repeat Customers"
  unit : percent
  format: "0 %"
  formula: |
    WITH firsts AS (
      SELECT customer_id, MIN(transaction_date) AS first_txn
      FROM   transactions_fmcg
      GROUP  BY 1
    )
    SELECT ROUND(
      COUNT(*) FILTER (WHERE repeat.txn_cnt > 1)::float /
      NULLIF(COUNT(*),0) * 100, 1)
    FROM (
      SELECT customer_id, COUNT(*) AS txn_cnt
      FROM   transactions_fmcg
      WHERE  {{ global_filters }}
      GROUP  BY 1
    ) repeat;

- id   : donut_age_distribution
  type : chart
  title: "Age Distribution"
  chart_type: donut
  dimension : age_group
  measures  : [customer_cnt]
  query: |
    SELECT age_group, COUNT(*) AS customer_cnt
    FROM   customers
    WHERE  {{ global_filters }}
    GROUP  BY 1
    ORDER  BY customer_cnt DESC;
  layout: { col_span: 1 }

- id   : donut_gender_distribution
  type : chart
  title: "Gender Distribution"
  chart_type: donut
  dimension : gender
  measures  : [customer_cnt]
  query: |
    SELECT gender, COUNT(*) AS customer_cnt
    FROM   customers
    WHERE  {{ global_filters }}
    GROUP  BY 1;
  layout: { col_span: 1 }

- id   : bar_income_bracket
  type : chart
  title: "Income Bracket Analysis"
  chart_type: bar
  dimension : income_bracket
  measures  : [revenue]
  query: |
    SELECT income_bracket,
           SUM(t.total_amount) AS revenue
    FROM   customers c
    JOIN   transactions_fmcg t ON t.customer_id = c.id
    WHERE  {{ global_filters }}
    GROUP  BY 1
    ORDER  BY revenue DESC;
  layout: { col_span: 2 }

- id   : heat_shopping_time
  type : chart
  title: "Shopping Time Preferences"
  chart_type: heatmap
  query: |
    SELECT EXTRACT(DOW  FROM transaction_date AT TIME ZONE 'Asia/Manila') AS dow,
           EXTRACT(HOUR FROM transaction_date AT TIME ZONE 'Asia/Manila') AS hour,
           COUNT(*) AS txn_cnt
    FROM   transactions_fmcg
    WHERE  {{ global_filters }}
    GROUP  BY 1,2;
  layout: { col_span: 2, min_height: 20rem }

- id   : stacked_payment_methods
  type : chart
  title: "Payment Method Usage"
  chart_type: stacked_bar
  query: |
    SELECT pay.method,
           DATE_TRUNC('month', t.transaction_date)::date AS month,
           SUM(pay.amount) AS value
    FROM   payments_fmcg pay
    JOIN   transactions_fmcg t ON t.id = pay.transaction_id
    WHERE  {{ global_filters }}
    GROUP  BY 1,2
    ORDER  BY 2 DESC, 1;
  layout: { col_span: 2 }

- id   : table_customer_segments
  type : table
  title: "Customer Segments"
  columns: [segment, share, description]
  query: |
    -- Dummy segmentation logic
    WITH seg AS (
      SELECT customer_id,
             CASE
               WHEN SUM(total_amount) > 2000 THEN 'Premium Shoppers'
               WHEN COUNT(*)  > 3        THEN 'Regular Customers'
               ELSE                         'Occasional Buyers'
             END AS segment
      FROM   transactions_fmcg
      WHERE  {{ global_filters }}
      GROUP  BY 1
    )
    SELECT segment,
           ROUND(COUNT(*)::float / SUM(COUNT(*)) OVER () * 100,1) AS share,
           CASE segment
             WHEN 'Premium Shoppers' THEN 'High value, frequent purchases'
             WHEN 'Regular Customers' THEN 'Consistent purchasing behaviour'
             ELSE 'Sporadic purchase patterns'
           END AS description
    FROM seg GROUP BY 1,3 ORDER BY share DESC;
  layout: { col_span: 2 }

- id   : card_consumer_key_insights
  type : insight_card
  title: "Key Insights"
  datasource: edge_function/azure_openai_stream
  props:
    prompt_template: |
      "Generate three insights on demographics, payment preference and
       retention based on the widgets above."
    max_items: 3
  layout: { col_span: 2 }

- id   : panel_consumer_recommendations
  type : action_board
  title: "Strategic Recommendations"
  datasource: table/consumer_actions
  columns : [priority, action, impact_estimate]
  layout  : { col_span: 4 }

## ---- CHAT --------------------------------------------------------
- id   : panel_scout_ai_chat
  type : chat_panel
  title: "Scout AI Retail Bot"
  datasource: edge_function/azure_openai_stream
  props:
    mascot_svg: "/assets/mascot/cookie.svg"   # tiny cookie in bottom-left
    stream    : true
  layout: { col_span: 4, min_height: 32rem }

# ================================================================
#  Global filter schema unchanged – reused from previous revision
# ================================================================
filters_schema:
  date_range : { from: date|null, to: date|null }
  barangays  : string[]
  regions    : string[]
  categories : string[]
  brands     : string[]
  stores     : string[]

# -------------------------------------------------------------
#  PRODUCTION SNAPSHOT  –  Live Production Data (FMCG Dataset)
#  Last verified: 2025-06-14 via https://scout-mvp.vercel.app
# -------------------------------------------------------------
snapshot:
  taken_at: "2025-06-14T15:30:00Z"
  data_source: "transactions_fmcg (5,000 transactions)"
  deployment_status: "✅ LIVE AND OPERATIONAL"
  kpis:
    total_revenue      : "₱1,213,902.44"  # FMCG dataset total
    transactions       : 5000             # Full FMCG transaction count
    avg_order_value    : "₱242.78"       # Updated AOV calculation
    units_sold         : 7250             # Estimated from item quantities
    unique_customers   : 995              # Active customer base
    gross_margin_pct   : "24-26%"        # After unit_cost backfill fix
  features_operational:
    - "✅ Real-time dashboard with Philippine retail data"
    - "✅ Azure OpenAI streaming chat bot (Scout Retail Bot)"
    - "✅ 17 regions, 72 brands, 5,000 FMCG transactions"
    - "✅ Responsive scaling with proper zoom functionality"
    - "✅ Database functions and RPC endpoints working"
    - "✅ Supabase client .distinct() API issue resolved"
  verification_urls:
    - "https://scout-mvp.vercel.app (main dashboard)"
    - "https://scout-mvp.vercel.app/chat (AI chat interface)"
  test_prompts:
    - "What was our total FMCG revenue last week?"
    - "Top 5 products by units sold this month"
    - "Show me repeat-customer rate and how to improve it"
    - "Which region grew fastest MoM?"
    - "Explain what the 5,000-row dataset actually contains"

# ===========================================================
# Scout Analytics – Supabase Database Schema Specification
# Canonical Source of Truth for Schema Drift Detection
# ===========================================================

roles:
  - name: admin
    noinherit: true
  - name: analyst
    noinherit: true
  - name: authenticated
    noinherit: false
  - name: anon
    noinherit: false
  - name: service_role
    noinherit: false

tables:
  - name: brands
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: name
        type: text
        is_nullable: false
      - name: company
        type: text
        is_nullable: true
    rls_enabled: true
    policies:
      - name: "Allow public read access to brands"
        operation: SELECT
        using: "true"
      - name: "Allow service role full access to brands"
        operation: ALL
        using: "role() = 'service_role'"

  - name: products
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: name
        type: text
        is_nullable: false
      - name: description
        type: text
        is_nullable: true
      - name: brand_id
        type: uuid
        is_nullable: false
      - name: category
        type: text
        is_nullable: false
      - name: unit_price
        type: numeric
        is_nullable: false
      - name: unit_cost
        type: numeric
        is_nullable: false
    rls_enabled: true
    policies:
      - name: "Allow public read access to products"
        operation: SELECT
        using: "true"
      - name: "Allow service role full access to products"
        operation: ALL
        using: "role() = 'service_role'"

  - name: stores
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: name
        type: text
        is_nullable: false
      - name: address
        type: text
        is_nullable: true
      - name: region
        type: text
        is_nullable: false
        default: "'NCR'"
    rls_enabled: true
    policies:
      - name: "Allow public read access to stores"
        operation: SELECT
        using: "true"
      - name: "Allow service role full access to stores"
        operation: ALL
        using: "role() = 'service_role'"

  - name: customers
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: customer_id
        type: text
        is_nullable: false
      - name: first_name
        type: text
        is_nullable: true
      - name: last_name
        type: text
        is_nullable: true
      - name: email
        type: text
        is_nullable: true
      - name: age
        type: integer
        is_nullable: true
      - name: gender
        type: text
        is_nullable: true
      - name: income_bracket
        type: text
        is_nullable: true
    rls_enabled: true
    policies:
      - name: "Allow authenticated users read/write access to customers"
        operation: ALL
        using: "role() = 'authenticated'"
      - name: "Allow service role full access to customers"
        operation: ALL
        using: "role() = 'service_role'"

  - name: devices
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: device_name
        type: text
        is_nullable: false
      - name: store_id
        type: uuid
        is_nullable: false
      - name: last_activity
        type: timestamp with time zone
        is_nullable: false
        default: now()
      - name: status
        type: text
        is_nullable: false
        default: "'active'"
    rls_enabled: true
    policies:
      - name: "Allow authenticated users read/write access to devices"
        operation: ALL
        using: "role() = 'authenticated'"
      - name: "Allow service role full access to devices"
        operation: ALL
        using: "role() = 'service_role'"

  - name: transactions
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: transaction_date
        type: timestamp with time zone
        is_nullable: false
        default: now()
      - name: customer_id
        type: uuid
        is_nullable: false
      - name: store_id
        type: uuid
        is_nullable: false
      - name: total_amount
        type: numeric
        is_nullable: false
      - name: payment_method
        type: text
        is_nullable: true
    rls_enabled: true
    policies:
      - name: "Allow authenticated users read/write access to transactions"
        operation: ALL
        using: "role() = 'authenticated'"
      - name: "Allow service role full access to transactions"
        operation: ALL
        using: "role() = 'service_role'"

  - name: transaction_items
    columns:
      - name: id
        type: uuid
        is_nullable: false
        default: gen_random_uuid()
        is_primary_key: true
      - name: transaction_id
        type: uuid
        is_nullable: false
      - name: product_id
        type: uuid
        is_nullable: false
      - name: quantity
        type: integer
        is_nullable: false
      - name: unit_price
        type: numeric
        is_nullable: false
      - name: total_price
        type: numeric
        is_nullable: false
    rls_enabled: true
    policies:
      - name: "Allow authenticated users read/write access to transaction items"
        operation: ALL
        using: "role() = 'authenticated'"
      - name: "Allow service role full access to transaction items"
        operation: ALL
        using: "role() = 'service_role'"

views:
  - name: daily_sales
    definition: "SELECT date_trunc('day', transaction_date) AS sale_date, SUM(total_amount) AS daily_revenue FROM transactions GROUP BY 1 ORDER BY 1"
    rls_enabled: true
    policies:
      - name: "read_daily_sales_analyst_admin"
        operation: SELECT
        using: "role() IN ('analyst', 'admin')"
  
  - name: product_performance
    definition: "SELECT p.name AS product_name, b.name AS brand_name, SUM(ti.quantity) AS total_quantity_sold, SUM(ti.total_price) AS total_revenue FROM transaction_items ti JOIN products p ON ti.product_id = p.id JOIN brands b ON p.brand_id = b.id GROUP BY p.name, b.name ORDER BY total_revenue DESC"
    rls_enabled: true
    policies:
      - name: "read_product_performance_analyst_admin"
        operation: SELECT
        using: "role() IN ('analyst', 'admin')"

  - name: transactions_fmcg
    definition: "SELECT * FROM transactions" # Placeholder, actual definition would be complex
    rls_enabled: true
    policies:
      - name: "Allow authenticated users read/write access to transactions_fmcg"
        operation: ALL
        using: "role() = 'authenticated'"
      - name: "Allow service role full access to transactions_fmcg"
        operation: ALL
        using: "role() = 'service_role'"

  - name: transaction_items_fmcg
    definition: "SELECT * FROM transaction_items" # Placeholder, actual definition would be complex
    rls_enabled: true
    policies:
      - name: "Allow authenticated users read/write access to transaction_items_fmcg"
        operation: ALL
        using: "role() = 'authenticated'"
      - name: "Allow service role full access to transaction_items_fmcg"
        operation: ALL
        using: "role() = 'service_role'"

functions:
  - name: get_age_distribution_simple
    parameters: []
    returns: "jsonb"
    language: "plpgsql"
    security: "definer"
    definition: |
      -- Placeholder for actual function logic
      SELECT jsonb_build_object('message', 'Function get_age_distribution_simple not implemented in detail in YAML spec');
  
  - name: get_gender_distribution_simple
    parameters: []
    returns: "jsonb"
    language: "plpgsql"
    security: "definer"
    definition: |
      -- Placeholder for actual function logic
      SELECT jsonb_build_object('message', 'Function get_gender_distribution_simple not implemented in detail in YAML spec');

  - name: get_top_products
    parameters: []
    returns: "jsonb"
    language: "plpgsql"
    security: "definer"
    definition: |
      -- Placeholder for actual function logic
      SELECT jsonb_build_object('message', 'Function get_top_products not implemented in detail in YAML spec');

  - name: get_income_distribution
    parameters: []
    returns: "jsonb"
    language: "plpgsql"
    security: "definer"
    definition: |
      -- Placeholder for actual function logic
      SELECT jsonb_build_object('message', 'Function get_income_distribution not implemented in detail in YAML spec');

  - name: supabase_catalog_dump
    parameters: []
    returns: "jsonb"
    language: "plpgsql"
    security: "definer"
    definition: |
      -- This function's actual definition is in a migration file,
      -- This YAML only defines its signature for auditing purposes.
      DECLARE
          result jsonb;
      BEGIN
          WITH roles AS (
              SELECT array_agg(rolname) as roles
              FROM pg_roles
              WHERE rolname NOT LIKE 'pg_%'
          ),
          tables AS (
              SELECT jsonb_agg(
                  jsonb_build_object(
                      'name', t.table_name,
                      'columns', (
                          SELECT jsonb_agg(
                              jsonb_build_object(
                                  'name', c.column_name,
                                  'type', c.data_type,
                                  'is_nullable', c.is_nullable = 'YES',
                                  'default', c.column_default,
                                  'is_primary_key', EXISTS (
                                      SELECT 1
                                      FROM information_schema.table_constraints tc
                                      JOIN information_schema.constraint_column_usage ccu
                                          ON tc.constraint_name = ccu.constraint_name
                                      WHERE tc.constraint_type = 'PRIMARY KEY'
                                          AND tc.table_name = t.table_name
                                          AND ccu.column_name = c.column_name
                                  )
                              )
                          )
                          FROM information_schema.columns c
                          WHERE c.table_name = t.table_name
                          AND c.table_schema = 'public'
                      ),
                      'rls_enabled', EXISTS (
                          SELECT 1
                          FROM pg_tables
                          WHERE tablename = t.table_name
                          AND rowsecurity = true
                      ),
                      'policies', (
                          SELECT jsonb_agg(
                              jsonb_build_object(
                                  'name', p.policyname,
                                  'operation', p.cmd,
                                  'using', p.qual,
                                  'with_check', p.with_check
                              )
                          )
                          FROM pg_policies p
                          WHERE p.tablename = t.table_name
                          AND p.schemaname = 'public'
                      )
                  )
              ) as tables
              FROM information_schema.tables t
              WHERE t.table_schema = 'public'
              AND t.table_type = 'BASE TABLE'
          ),
          views AS (
              SELECT jsonb_agg(
                  jsonb_build_object(
                      'name', v.viewname,
                      'definition', v.definition,
                      'rls_enabled', EXISTS (
                          SELECT 1
                          FROM pg_views
                          WHERE viewname = v.viewname
                          AND schemaname = 'public'
                      ),
                      'policies', (
                          SELECT jsonb_agg(
                              jsonb_build_object(
                                  'name', p.policyname,
                                  'operation', p.cmd,
                                  'using', p.qual,
                                  'with_check', p.with_check
                              )
                          )
                          FROM pg_policies p
                          WHERE p.tablename = v.viewname
                          AND p.schemaname = 'public'
                      )
                  )
              ) as views
              FROM pg_views v
              WHERE v.schemaname = 'public'
          ),
          functions AS (
              SELECT jsonb_agg(
                  jsonb_build_object(
                      'name', p.proname,
                      'parameters', (
                          SELECT jsonb_agg(
                              jsonb_build_object(
                                  'name', pa.parameter_name,
                                  'type', pa.data_type,
                                  'default', pa.parameter_default
                              )
                          )
                          FROM information_schema.parameters pa
                          WHERE pa.specific_name = p.proname
                      ),
                      'returns', pg_get_function_result(p.oid),
                      'language', p.prolang::regproc::text,
                      'security', CASE WHEN p.prosecdef THEN 'definer' ELSE 'invoker' END
                  )
              ) as functions
              FROM pg_proc p
              JOIN pg_namespace n ON p.pronamespace = n.oid
              WHERE n.nspname = 'public'
          )
          SELECT jsonb_build_object(
              'roles', (SELECT roles FROM roles),
              'tables', (SELECT tables FROM tables),
              'views', (SELECT views FROM views),
              'functions', (SELECT functions FROM functions)
          ) INTO result;

          RETURN result;
      END;